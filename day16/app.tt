def input: '$IN::lines...;';

data packet <{version: <0..8>, type: <0..8>}>,
  children <[<packet>]>

templates hexDigitToBitString
  <='0'> '0000'! <='1'> '0001'! <='2'> '0010'! <='3'> '0011'!
  <='4'> '0100'! <='5'> '0101'! <='6'> '0110'! <='7'> '0111'!
  <='8'> '1000'! <='9'> '1001'! <='A'> '1010'! <='B'> '1011'!
  <='C'> '1100'! <='D'> '1101'! <='E'> '1110'! <='F'> '1111'!
end hexDigitToBitString

composer asBits
  [<'.'>* -> hexDigitToBitString] -> '$...;'
end asBits

templates bitsToInt
  @: 0;
  $... -> #
  $@!
  <='0'> @: $@ * 2;
  <='1'> @: $@ * 2 + 1;
end bitsToInt

composer decodePacket
  <packet>+  (<'0*'>)
  rule packet: {version: <'...'> -> bitsToInt, <literal|operator>}
  rule literal: (<='100'>) type: 4, value: <value>
  rule value: [<prefix>* <suffix>] -> ('$...;' -> bitsToInt)"1"
  rule prefix: (<='1'>) <'....'>
  rule suffix: (<='0'>) <'....'>
  rule operator: type: <'...'> -> bitsToInt, <lengthType0|lengthType1>
  rule lengthType0: (<='0'> def nBits: <'.{15}'> -> bitsToInt;) children: [<'.{$nBits;}'> -> decodePacket]
  rule lengthType1: (<='1'> def nPackets: <'.{11}'> -> bitsToInt;) children: [ <packet>=$nPackets ]
end decodePacket

templates countVersions
  @: 0;
  $ -> #
  $@!
  <> @: $@ + $.version::raw; $ -> \(<{children: <>}> $.children...! \) -> #
end countVersions

source solutionPart1
  $input -> asBits -> decodePacket -> countVersions !
end solutionPart1

test 'part1 works'
  modify program
    def input: '8A004A801A8002F478';
  end program
  assert $solutionPart1 <=16> 'packet versions'
end 'part1 works'

processor Product
  @: 1;
  sink accumulate
    @Product: $@Product * $;
  end accumulate
  source result
    $@Product!
  end result
end Product

templates evaluatePacket
  <{type: <=0>}> $.children... -> evaluatePacket -> ..=Sum&{of: :()} !
  <{type: <=1>}> $.children... -> evaluatePacket -> ..=Product !
  <{type: <=2>}> $.children... -> evaluatePacket -> ..=Min&{by: :(), select: :()} !
  <{type: <=3>}> $.children... -> evaluatePacket -> ..=Max&{by: :(), select: :()} !
  <{type: <=4>}> $.value !
  <{type: <=5>}?($.children(1) -> evaluatePacket <($.children(2) -> evaluatePacket)~..>)> 1"1" !
  <{type: <=5>}> 0"1" !
  <{type: <=6>}?($.children(1) -> evaluatePacket <..~($.children(2) -> evaluatePacket)>)> 1"1" !
  <{type: <=6>}> 0"1" !
  // TODO: why not <=(...)> here?
  <{type: <=7>}?($.children(1) -> evaluatePacket <..~($.children(2) -> evaluatePacket)|($.children(2) -> evaluatePacket)~..>)> 0"1" !
  <{type: <=7>}> 1"1" !
end evaluatePacket

source solutionPart2
$input -> asBits -> decodePacket -> evaluatePacket !
end solutionPart2

test 'part2 eq'
  modify program
    def input: '9C0141080250320F1802104A08';
  end program
  assert $solutionPart2 <=1> 'eq'
end 'part2 eq'

// String interpolation is to create a empty string value when property does not exist (otherwise the flow would just stop)
'$:'part' -> SYS::property;' -> \(
  when <='part1'|=''> do $solutionPart1 !
  when <='part2'> do $solutionPart2 !
  otherwise 'Unknown part $;' !
\) -> 'Tailspin
$;
' -> !OUT::write
