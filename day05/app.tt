composer coords
  {x1: <"x">, (<','>) y1: <"y">, (<' -> '>) x2: <"x">, (<','>) y2: <"y">}
end coords

def input: [$IN::lines -> coords];

source solutionPart1
  @: [0..999 -> [0..999 -> 0]];
  $input ... -> \(when <{x1: <=$.x2>}|{y1: <=$.y2>}> do $! \)
    -> \(
      when <{x1: <$.x2~..>}|{y1: <$.y2~..>}> do {x1: $.x2, y1: $.y2, x2: $.x1, y2: $.y1} !
      otherwise $!
    \) -> [by $.x1..$.x2 -> $+1, by $.y1..$.y2 -> $+1] -> @($(1); $(2)): $@($(1); $(2)) + 1;
  $@... ... -> \(<2..> $!\) -> ..=Count !
end solutionPart1

source solutionPart2
  @: [0..999 -> [0..999 -> 0]];
  $input ... -> #
  $@... ... -> \(<2..> $!\) -> ..=Count !
  when <{x1: <=$.x2>}|{y1: <=$.y2>}> do
    $ -> \(
      when <{x1: <$.x2~..>}|{y1: <$.y2~..>}> do {x1: $.x2, y1: $.y2, x2: $.x1, y2: $.y1} !
      otherwise $!
    \) -> [by $.x1..$.x2 -> $+1, by $.y1..$.y2 -> $+1] -> @($(1); $(2)): $@($(1); $(2)) + 1;
  
  when <{x1: <..$.x2>, y1: <..$.y2>}> do
    def point: $;
    0"x"..$.x2-$.x1 -> $::raw -> @($+$point.x1+1; $+$point.y1+1): $@($+$point.x1+1; $+$point.y1+1)+1;
  
  when <{x1: <..$.x2>}> do
    def point: $;
    0"x"..$.x2-$.x1 -> $::raw -> @($+$point.x1+1; $point.y1-$+1): $@($+$point.x1+1; $point.y1-$+1)+1;
  
  when <{x1: <$.x2..>, y1: <$.y2..>}> do
    def point: $;
    0"x"..$.x1-$.x2 -> $::raw -> @($point.x1-$+1; $point.y1-$+1): $@($point.x1-$+1; $point.y1-$+1)+1;
  
  when <{x1: <$.x2..>}> do
    def point: $;
    0"x"..$.x1-$.x2 -> $::raw -> @($point.x1-$+1; $+$point.y1+1): $@($point.x1-$+1; $+$point.y1+1)+1;
end solutionPart2

test 'part2'
  modify program
    def input: [[
      '0,9 -> 5,9',
      '8,0 -> 0,8',
      '9,4 -> 3,4',
      '2,2 -> 2,1',
      '7,0 -> 7,4',
      '6,4 -> 2,0',
      '0,9 -> 2,9',
      '3,4 -> 1,4',
      '0,0 -> 8,8',
      '5,5 -> 8,2'    
    ]... -> coords];
  end program

  assert $solutionPart2 <=12> ''
end 'part2'

// String interpolation is to create a empty string value when property does not exist (otherwise the flow would just stop)
'$:'part' -> SYS::property;' -> \(
  when <='part1'|=''> do $solutionPart1 !
  when <='part2'> do $solutionPart2 !
  otherwise 'Unknown part $;' !
\) -> 'Tailspin
$;
' -> !OUT::write
