include 'hash'

templates encodeAmphipods
  <='A'> 3!
  <='B'> 5!
  <='C'> 7!
  <='D'> 9!
end encodeAmphipods

composer extractAmphipods
  [<amphipod|not>+]
  rule amphipod: <='A'|='B'|='C'|='D'> -> encodeAmphipods
  rule not: (<~amphipod>)
end extractAmphipods

def input: [$IN::lines] -> [$(3..4)... -> extractAmphipods];

def costs: ['', '', 1"e", '', 10"e", '', 100"e", '', 1000"e"];

def map: ['.', '.', [], '.', [], '.', [], '.', [], '.', '.'];

templates populateMap&{depth:}
  @: $map;
  @(3): $($depth..1:-1; 1);
  @(5): $($depth..1:-1; 2);
  @(7): $($depth..1:-1; 3);
  @(9): $($depth..1:-1; 4);
  {state: $@, cost: $@ -> baseCost&{depth: $depth}} !
end populateMap

templates abs
  <..0> -$ !
  <> $ !
end abs

templates baseCost&{depth:}
  @: $depth * ($depth + 1) ~/ 2 * 1111;
  $ -> \home[i](when <[]> do @:1;
    $ -> \[j](
      when <=$i ?($j <=$@home>)> do  @baseCost: $@baseCost - ($depth - $j + 1) * $costs($); @home: $@home + 1;
      when <=$i> do @baseCost: $@baseCost + ($depth - $j + 1 + 2) * $costs($);
      otherwise @baseCost: $@baseCost + ($depth - $j + 1 + ($-$i -> abs)) * $costs($); \) -> !VOID \home) -> !VOID
  $@!
end baseCost

data 
  amphipod <3..9>,
  state <[<'.'|amphipod|[<amphipod>]>]>,
  cost <"e">

  templates moveAllHome
    @: $;
    1 -> #
    $@ !

    when <..$@moveAllHome.state::length> do
      def i: $;
      $@moveAllHome.state($i) -> \(
        when <3..
             ?($@moveAllHome.state($) <~[<~=$>]>)
             ?([$@moveAllHome.state($i+1..$)..., $@moveAllHome.state($..$i-1)...] <~[<3..>]>)>
        do
          def amphipod: $@moveAllHome.state($i);
          ..|@moveAllHome.state($amphipod): $amphipod;
          @moveAllHome.state($i): '.';
          1 !
        when <[<~=$i>](1..)
             ?($@moveAllHome.state($(last)) <~[<~=$(last)>]>)
             ?([$@moveAllHome.state($i..$(last))..., $@moveAllHome.state($(last)..$i)...] <~[<3..>]>)>
        do
          def amphipod: ^@moveAllHome.state($i;last);
          ..|@moveAllHome.state($amphipod): $amphipod;
          1 !
        otherwise $i + 1 !
      \) -> #
  end moveAllHome
  

templates generateMoves&{depth:}
  def baseCost: $.cost;
  def basePosition: $.state;
  templates moveOut
    def from: $;
    $basePosition -> \[i](
      when <='.' ?([$basePosition($i+1..$from)..., $basePosition($from..$i-1)...] <~[<3..>]>)> do
        @: $basePosition;
        @($i): ^@($from;last);
        {state: $@, cost: $baseCost +
          (($i - $@($i) -> abs) - ($from - $@($i) -> abs) + ($i - $from -> abs) - ($@($i) -> \(<=$from> 2! <> 0!\)))
            * $costs($@($i))} !
    \)... !
  end moveOut

  $basePosition -> \[i](
    when <[<~=$i>](1..)> do
      $i -> moveOut !
  \)... !
end generateMoves

operator (a descendingCost b)
  <?($a.cost <=$b.cost>)> 0 !
  <?($a.cost <..$b.cost>)> 1 !
  <> -1 !
end descendingCost

templates sort&{by:}
  @: [];
  $ -> #
  <[](2..)>
    def pivot: $(1);
    [ [ $(2..last)... -> \(
      <?(($ by $pivot) <..0>)>
        $ !
      <>
        ..|@sort: $;
     \)] -> sort&{by:by}..., $pivot, $@ -> sort&{by:by}... ] !
   <>
     $ !
end sort

templates solve
  def depth: $::length;
  def visited: [] -> hash/Map&{key: :(state:), value: :()};
  @: {cost: 999999999"e", stack:[$ -> populateMap&{depth:$depth}]};
  1 -> #
  $@.cost !

  when <?($@.stack <[](1..)>)> do ^@.stack(last) -> \(
    when <{cost: <$@solve.cost..>}> do !VOID
    when <?([$.state -> visited::get] <[](1..)>)> do !VOID
    otherwise
      $ -> visited::put -> !VOID
      $ -> moveAllHome -> \(
        when <{state: <~[<3..>]>} ?($.state(3) <~[<~=3>]>)?($.state(5) <~[<~=5>]>)?($.state(7) <~[<~=7>]>)?($.state(9) <~[<~=9>]>)> do
          @solve.cost: $.cost;
        otherwise
          [$ -> generateMoves&{depth: $depth}] -> sort&{by: descendingCost} ... -> ..|@solve.stack: $;
      \) -> !VOID
    \) -> !VOID
    1 -> #
end solve
  
source solutionPart1
  $input -> solve !
end solutionPart1

source solutionPart2
  [$input(1), '  #D#C#B#A#' -> extractAmphipods, '  #D#B#A#C#' -> extractAmphipods, $input(2)] -> solve !
end solutionPart2

// String interpolation is to create a empty string value when property does not exist (otherwise the flow would just stop)
'$:'part' -> SYS::property;' -> \(
  when <='part1'|=''> do $solutionPart1 !
  when <='part2'> do $solutionPart2 !
  otherwise 'Unknown part $;' !
\) -> '$;
' -> !OUT::write
