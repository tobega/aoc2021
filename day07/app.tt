composer pos
  @: [0..9999 -> 0];
  (<h>+) $@
  rule h: (<INT> -> @($+1): $@($+1) + 1;) (<','>?)
end pos

def input: $IN::lines -> pos;
def noofcrabs: $input... -> ..=Sum&{of: :()};

templates abs
  when <0..> do $!
  otherwise -$ !
end abs

source solutionPart1
  def half: $noofcrabs ~/ 2;
  @: 0;
  1 -> #
  when <?($@ <..~$half>)> do
    @: $@ + $input($);
    $ + 1 -> #
  otherwise
    def median: $ - 2;
    $median -> fuelToAlign&{fuelFunction: abs} !
end solutionPart1

test 'part1'
  modify program
    def input: '16,1,2,0,4,2,7,1,2,14' -> pos;
  end program
  assert $solutionPart1 <=37> ''
end 'part1'

templates crabFuel
  $ -> abs -> $ * ($+1) ~/ 2 !
end crabFuel

templates fuelToAlign&{fuelFunction:}
  def alignment: $;
  $input-> \[i]( $ * ($i - 1 - $alignment -> fuelFunction) ! \) ... -> ..=Sum&{of: :()} !
end fuelToAlign

source solutionPart2
  def sumofpos: $input -> \[i]($ * ($i-1) !\)... -> ..=Sum&{of: :()};
  def meanFloor: $sumofpos ~/ $noofcrabs;
  [$meanFloor..$meanFloor+1 -> fuelToAlign&{fuelFunction: crabFuel}] ... -> ..=Min&{by: :(), select: :()} !
  <~=0> @: $@ + 1;
end solutionPart2

test 'part2'
  modify program
    def input: '16,1,2,0,4,2,7,1,2,14' -> pos;
  end program
  assert $solutionPart2 <=168> ''
end 'part2'

'$:'part' -> SYS::property;' -> \(
  when <='part1'|=''> do $solutionPart1 !
  when <='part2'> do $solutionPart2 !
  otherwise 'Unknown part $;' !
\) -> 'Tailspin
$;
' -> !OUT::write
